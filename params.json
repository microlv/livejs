{"name":"livejs","tagline":"a common library for promise/then/async and events ","body":"# livejs\r\n\r\n![node version][version-image]\r\n[version-image]: https://img.shields.io/badge/livejs-v1-green.svg?style=livejs-square\r\n\r\n## Introduce\r\n\r\n```\r\n1.powerful promise library. simple and faster!\r\n2.use to do something like promise.\r\n3.shortcut name use $l.\r\n\r\ntest case will coming soon...\r\nmore function will coming soon...\r\n```\r\n## Download\r\n```\r\nCheck out [https://github.com/microlv/livejs.git];\r\nGitHub: https://github.com/microlv/livejs/;\r\nWiki: http://microlv.github.io/livejs;\r\n```\r\n## Features\r\n```\r\n1.like q/async, but the code is simple and powerful and useful.\r\n2.every function will inject a argument name 'defer', you can use it to resolve/reject.\r\n3.detect the defer.err to see parent function has error or not.\r\n```\r\n## Support\r\n\r\nChrome, Nodejs\r\n\r\n## Installation\r\n```\r\nnpm install livejs --save\r\n```\r\n## Usage\r\n\r\nsample use:\r\n\r\n```js\r\n$l(function (d) {\r\n\tsetTimeout(function () {\r\n\t\tconsole.log('function 1');\r\n\t\td.resolve('pass data to next function!');\r\n\t\tconsole.log('function 1 step 2');\r\n\t}, 0);\r\n\tconsole.log('function 1 step 1');\r\n}).then(function (d, data) {\r\n\tconsole.log('function 2');\r\n\tconsole.log(data);\r\n\td.reject();\r\n}).then(function () {\r\n\tconsole.log('function 3,function2 resolve will go here');\r\n}, function () {\r\n\tconsole.log('function 3 function2 reject will go here');\r\n}).then(function () {\r\n\tconsole.log('function 4');\r\n});\r\n```\r\n\r\n```js\r\n$l(function (d) {\r\n    console.log('factory task 1');\r\n    d.resolve();\r\n}).then(function (d) {\r\n    console.log('factory task 2');\r\n    d.resolve();\r\n}).series([\r\n    function (d) {\r\n        console.log('series task 3');\r\n        d.resolve();\r\n    }, function (d) {\r\n        console.log('series task 4');\r\n        d.resolve();\r\n    }\r\n], function (d) {\r\n    console.log('series task 5');\r\n}).then(function () {\r\n    //why here don't work??\r\n    //because task 5 don't resolve the it!!!\r\n    console.log('I can\\'t execute');\r\n});\r\n```\r\n\r\nseries:\r\n\r\n```js\r\n$l.series([function (d) {\r\n    //use resolve will make the series execute next task!\r\n    d.resolve();\r\n\r\n    //step pass data\r\n    var passData = {hello: 'world'};\r\n    d.resolve(passData)\r\n\r\n    //reject will make series stop.\r\n    d.reject();\r\n\r\n}], function (d, data) {\r\n\r\n    //I can get the data from //step pass data\r\n    console.log(data);\r\n});\r\n```\r\n\r\nseries example:\r\n\r\n```js\r\n$l.series([\r\n\tfunction (d) {\r\n\t\tconsole.log('series 1');\r\n\t\tsetTimeout(function () {\r\n\t\t\td.resolve('series 2 finish!');\r\n\t\t}, 0);\r\n\t},\r\n\tfunction (d) {\r\n\t\tconsole.log('series 2');\r\n\t\tsetTimeout(function () {\r\n\t\t\td.resolve('series 2 finish!');\r\n\t\t}, 0);\r\n\t},\r\n\tfunction (d) {\r\n\t\tconsole.log('series 3');\r\n\t\tsetTimeout(function () {\r\n\t\t\td.resolve('series 3 finish!');\r\n\t\t}, 0);\r\n\t}\r\n], function (d,result) {\r\n\tconsole.log('finish');\r\n\td.resolve();\r\n}).then(function (d) {\r\n\tconsole.log('then start');\r\n});\r\n```\r\n\r\n## Author\r\n\r\n```\r\nAndy.lv@live.com;\r\nAny problem contact with me.\r\n```\r\n## Contributors\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}