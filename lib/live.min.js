!function(n,e,t){"use strict";"undefined"!=typeof module&&"undefined"!==module.exports?module.exports=e(t):"function"==typeof define&&"object"===define.amd?define([],e):n.$l=e(t)}("object"==typeof window?window:this,function(n){"use strict";function e(n){return"function"==typeof n}function t(n){return this instanceof t?(this.defer=new u(this),this.fail=function(){},r(this,n),void o(this)):new t(n)}function r(n,e,t){var r=f(n,e,t);n.defer.queue.push(r)}function i(){}function o(n,e,t){var r,i=0,o=n.defer.current,f=n.defer.queue;return o?(i=f.indexOf(o),o=n.defer.current=f[++i],void(o&&(r=("resolve"===e?o.fn:o.err)||function(n){n.resolve()},h(function(){r(t)})))):(o=n.defer.current=f[0],void h(function(){o.fn(t)}))}function f(n,e,t){function r(e){var t=!1;return function(r){t||(t=!0,e=e||function(n){n.resolve()},e.call(n,n.defer,r))}}return{fn:r(e),err:r(t)}}function u(e){this.current=n,this.queue=[],this.$$parent=e}function c(n){for(var e=1,t=arguments.length;t>e;e++){var r=arguments[e];if(r)for(var i=Object.keys(r),o=0,f=i.length;f>o;o++){var u=i[o];n[u]=r[u]}}return n}function s(n){return n instanceof t?n:new t}function a(n,e){var t=s(this);return e=e||function(){},r(t,n),r(t,e),t}var l;l="function"==typeof setImmediate?setImmediate:"undefined"!=typeof process&&"function"==typeof process.nextTick?process.nextTick:setTimeout;var h=function(n,e){l(n,e||0)},d=Array.isArray;t.fn=t.prototype={version:"1.1.5",constructor:t,then:function(n,e){return r(this,n,e),this},all:function(){}},u.prototype={resolve:function(n){o(this.$$parent,"resolve",n)},reject:function(n){o(this.$$parent,"reject",n)}};var v=function(n,e){if(n.forEach)return n.forEach(e);for(var t=0;t<n.length;t++)e(n[t],t,n)},p=function(n,e){var t=s(this);if(d(n)){if(!n.length)return r(t,e);for(var i=0;i<n.length;i++)r(t,n[i])}else r(t,n);return r(t,e),t};return t.series=function(n,e){return p.call(this,n,e)},t.parallel=function(n,t){var r=[],i=this;return a.call(i,function(t){v(n,function(n){e(n)&&r.push(n.call(i))}),t.resolve(r)},t)},t.each=function(n,e,t){var r=[];return a.call(this,function(t){v(n,function(n){e(n)}),t.resolve(r)},t)},t.fail=function(n){return i(this,n)},t["finally"]=function(){},c(t.fn,{series:t.series,parallel:t.parallel,each:t.each,forEach:t.each,extend:c}),t});
//# sourceMappingURL=data:application/json;base64,