!function(e,n,t){"use strict";"undefined"!=typeof module&&"undefined"!==module.exports?module.exports=n(t):"function"==typeof define&&"object"===define.amd?define(n):e.$l=n(t)}("object"==typeof window?window:this,function(e){"use strict";function n(e){return"function"==typeof e}function t(e){return this instanceof t?(this.defer=new f(this),r(this,e),void i(this)):new t(e)}function r(e,n,t){var r=o(e,n,t);e.defer.queue.push(r)}function i(e,n,t){var r,i=0,o=e.defer.current,f=e.defer.queue;return o?(i=f.indexOf(o),o=e.defer.current=f[++i],void(o&&(r=("resolve"===n?o.fn:o.err)||function(e){e.resolve()},l(function(){r(t)})))):(o=e.defer.current=f[0],void l(function(){o.fn(t)}))}function o(e,n,t){function r(n){var t=!1;return function(r){t||(t=!0,n=n||function(e){e.resolve()},n.call(e,e.defer,r))}}return{fn:r(n),err:r(t)}}function f(n){this.current=e,this.queue=[],this.$$parent=n}function u(e){for(var n=1,t=arguments.length;t>n;n++){var r=arguments[n];if(r)for(var i=Object.keys(r),o=0,f=i.length;f>o;o++){var u=i[o];e[u]=r[u]}}return e}function c(e){return e instanceof t?e:new t}var s,a=Array.isArray;s="function"==typeof setImmediate?setImmediate:"undefined"!=typeof process&&"function"==typeof process.nextTick?process.nextTick:setTimeout;var l=function(e,n){s(e,n||0)};return t.fn=t.prototype={version:"1.1.5",constructor:t,then:function(e,n){return r(this,e,n),this},all:function(){}},f.prototype={resolve:function(e){i(this.$$parent,"resolve",e)},reject:function(e){i(this.$$parent,"reject",e)}},t.series=function(e,n){var t=c(this);if(a(e))for(var i=0;i<e.length;i++)r(t,e[i]);else r(t,e);return r(t,n),t},t.parallel=function(e,t){var i=c(this),o=[];return a(e)?r(i,function(){for(var r=0;r<e.length;r++)n(e[r])&&o.push(e[r].call(i));t.call(i,i.defer,o)}):n(e)&&t.call(i,e.call(i)),i},t.each=function(){},u(t.fn,{series:t.series,parallel:t.parallel,each:t.each,extend:u}),t});
//# sourceMappingURL=data:application/json;base64,